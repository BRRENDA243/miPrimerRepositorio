:root {
    /* --nombre-variable */
    --font-primary: 'Poppins', sans-serif;
    --color-primary: #A60311;
    --color-secondary: #D9042B;
    --color-text-primary: #D9CCB4;
    --color-text-secondary: #D98E04;
    --color-background: #590219;
    --color-light: #F2F2F2;
    --color-dark: #070C26;
}

body{
    background-color: var(--color-background);
    color:var(--color-light);
    font-family:var(--font-primary);
    }

    
    /* 
    Enfoque de diseño basado en sistemas para establecer reglas y patrones escalables y reutilizables.
    Se personalizan variables para acceder a cualquier valor de una propiedad mediante la pseudoclase ":root" con la sintaxis --nombre-variable 
    */




    .position{
        width:100px;
        height:100px;
        background-color: var(--color-dark);
    }

    /* La posicion estatica es la posicion por default del html, no se afecta por margin de ningun*/


    #static{
        background-color: var(--color-text-secondary);
    }

/* Es posicionado de forma relativa al viewport y si permite movimiento mediante propiedades top, bottom, left, right */


    #relative{
        position: relative;
        top:50px;
        left:200px;
        background-color: var(--color-primary);

    }

    #absolute{
        position:absolute;
        top: 50px;
        left: 200px;
        background-color: var(--color-light);
        color:var(--color-dark)
    }

    #ancestro{
        position:absolute;
        width: 100px;
        height:100px;
        background-color: var(--color-dark);
        border:solid var(--color-light) 1px;
    }

    /*Fixed nos permite mantener el elmento de manera fija en ek viewport.*/
    #fixed{

        position: fixed;
        left: 350px;
        top: 500px;
        background-color: cadetblue;
        }
        
        #chat{

            position:fixed;
            top: 550px;
            left: 400px;
            width: 60px;
            height: 60px;
        }

        #Image20231206104217 {

            width: 100%;
        }

        .display-inline {
            width: 100px;
            height: 100px;
            background-color: var(--color-text-primary);
            color: var(--color-dark);
            text-align: center;
            margin: 2px;
        }
        
        #display-1, #display-2 {
            display: inline;
        }

        .display-block{
            display:inline-block;

            width: 100px;
            height: 100px;
            background-color: var(--color-secondary);
            text-align:center;
            margin:2px
        }

        @media (max-width: 720px){
            .display-none{
                display:none;
            }
        }


        .container {

            width: auto;
            height: 350px;
            margin: 10px;
            padding: 15px;
            border-radius: 10px;
            background-color: var(--color-text-secondary);
        
        }
        .display-flex {
            width: 100px;
            height: 80px;
            margin: 5px;
            padding: 2px;
            text-align: center;
            background-color: var(--color-dark);
            border-radius: 6px;
        }
        
        /*Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos.
        Por default, la dirección de flex es en filas (row).
        Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
            > - flex-direction: column, column-reverse, row, row-reverse*/

            /*Grid layout
            Elementos de una cuadrícula grid:contenedor,items,celda, display:grid; */

            .grid{
                background-color: var(--color-secondary);
                border-radius: 3px;
                padding: 20px;
                text-align:center;
                border:solid var(--color-text-primary) 1px;
            }

